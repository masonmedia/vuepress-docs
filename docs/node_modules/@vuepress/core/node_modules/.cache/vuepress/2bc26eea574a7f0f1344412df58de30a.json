{"remainingRequest":"/Users/andrewmason/Projects/vue_projects/vuepress_demo/docs/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/andrewmason/Projects/vue_projects/vuepress_demo/docs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/andrewmason/Projects/vue_projects/vuepress_demo/docs/src/ui/components.md?vue&type=template&id=477f5616&","dependencies":[{"path":"/Users/andrewmason/Projects/vue_projects/vuepress_demo/docs/src/ui/components.md","mtime":1623895031669},{"path":"/Users/andrewmason/Projects/vue_projects/vuepress_demo/docs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/andrewmason/Projects/vue_projects/vuepress_demo/docs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/andrewmason/Projects/vue_projects/vuepress_demo/docs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/andrewmason/Projects/vue_projects/vuepress_demo/docs/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/andrewmason/Projects/vue_projects/vuepress_demo/docs/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}